#!/bin/bash
shopt -s extglob

function createTable()
{	
	arrayOfAttributesNames=()
	arrayOfAttributesTypes=()
	
	read -p "Enter Number Of Attributes :- " attributesNumber
	
	case $attributesNumber in
	+([1-9])) 
		
		for (( i=0; i<attributesNumber; i++ ))
		do
			read -p "Enter Name of '$((i+1))' attribute :- " attributeName
			#checkAttributeName $attributeName
			isvaild=$?
				if (($isvaild==1))
			then
				arrayOfAttributesNames[$i]=$attributeName
				echo -e "What is data type of '$attributeName' \n1-int\t\t 2-string\n"
				read -p "Enter a vaild option " dataTypeOption 
		
				case $dataTypeOption in 
				    1) 
					echo "created '$attributeName' with Data Type 'int' "
					arrayOfAttributesTypes[$i]='int';;
				    2)
					echo "created '$attributeName' with Data Type 'str' " 
					arrayOfAttributesTypes[$i]='str';;
				    *)
					echo -e "Enter a valid Option\nEnter attribute again"
				 	createTable $1 $2 $3;;
				esac
			else
				createTable $1 $2 $3
			fi
			
			
		done ;;
 	*)
 		echo -e "invaild number\nTry again"
 		createTable $1 $2 $3 ;;
	esac		
			 
		
	attributesNames=$(IFS=\|; echo "${arrayOfAttributesNames[*]}")
    	attributesTypes=$(IFS=\|; echo "${arrayOfAttributesTypes[*]}")

	echo "$attributesNames" > ./DataBases/"$1"/"$2"
	echo "$attributesTypes" >> ./DataBases/"$1"/"$2"
	echo "$attributesNames" > ./DataBases/"$1"/"$3"
}


function checkTableName() 
{
	# first vaildation of keywods
	arrayOfKeywords=("SELECT" "INSERT" "DELETE" "UPDATE" "GRANT" "REVOKE" "ADD" "ALTER" "COLUMN" "TABLE" "ROW" "FROM" "AND" "OR" "AS" "DROP" "HAVING" "WHERE" "EXIT" "CREATE")
	
	read -p "Enter Table Name ;- " tableName
	
	if [[ -f ./DataBases/"$1"/"$tableName" ]];
	then
		echo -e "\t :):):) ------------ '$tableName' TABLE Already Exists ----------- :(:(:( "
		keyWordtrigger=1
	else
		#check if the user input is a keyword------------
		for i in ${arrayOfKeywords[@]}
		do
			upperTableName=`echo $tableName | tr '[a-z]' '[A-Z]'`
			if [[ $upperTableName == $i ]];then
			        keyWordtrigger=1
				echo -e "\t :(:(:(  ------------ This '$tableName' Table name is invalid----------- :(:(:("
			        break  			            
			else
				if [[ $tableName =~ ^[a-zA-Z]+[a-zA-Z0-9_]*$ ]];
				then 
					touch ./DataBases/"$1"/."$tableName".metadata
					touch ./DataBases/"$1"/"$tableName"	
					createTable  $1 ."$tableName".metadata $tableName
				else
				echo -e "\t :(:(:(  ------------ This '$tableName' Table name is invalid----------- :(:(:("
				fi
				
			fi		
		done
		
		
	fi

	
	
}



function checkAttributeName()
{
	
	arrayOfKeywords=("SELECT" "INSERT" "DELETE" "UPDATE" "GRANT" "REVOKE" "ADD" "ALTER" "COLUMN" "TABLE" "ROW" "FROM" "AND" "OR" "AS" "DROP" "HAVING" "WHERE" "EXIT" "CREATE")
	
	
	for n in ${arrayOfKeywords[@]}
	do
	    upperColName=`echo $1 | tr '[a-z]' '[A-Z]'`
	    if [[ $upperColName == $n ]];
	    then
	    	
		 echo -e "\t--!!!!!!!!!! Invalid name !!!!!!!!!!--\n\t------------ Reserved word ------------"
		  y=0
		  return $y
	    fi
	done
	
	if ! [[ $1 =~ ^[a-zA-Z]+[a-zA-Z0-9_]*$ ]];then
		echo -e "\t--!!!!!!!!!! Invalid  name !!!!!!!!!!--"
		y=0
		
	else
		y=1
	fi
	
	return $y
	
}
function dropTable(){
	
	read tableName
	
	if [ -e ./DataBases/"$1"/"$tableName" ]
	then
		while true;
		do
			read -p "Are you sure to delete '$tableName' DataBase ? Enter [Y or N]-->  " answer
			answer=${answer,,}
			if [[ $answer == "yes" || $answer == "y" ]]; then
					rm ./DataBases/"$1"/"$tableName"
					rm ./DataBases/"$1"/."$tableName".metadata
					echo -e "\n\t :( :( :(------------ '$tableName' TABLE Deleted Successfully----------- :( :( :("
					break
			elif [[ $answer == "no"  || $answer == "n" ]]; then
					echo -e "\n\t :) :) :) ------------ '$tableName' TABLE Deleting Skipped----------- :) :) :)"
					break
			else
					echo -e "\n\t :( :( :(------------ Wrong input please choose yes(y) or no(n)----------- :( :( :(\n"
				fi
		done
		
	else
		echo -e "\t :):):) ------------ This '$tableName' Table Not Exists ----------- :(:(:( \n"
		
	fi

}

function tableStart()
{


		read -p "Enter the database name to connect or ("exit"): " dbName
		if [[ $dbName == "exit" || $dbName == "EXIT" ]];
		then
			exit
		else

			#Now we check if the this data base name is already there
			if [[ -d ./DataBases/$dbName ]];then
				echo -e "\n\t------ Connected Succesfully to '$dbName' DataBases ------\n"
				
				echo -e "\t\t\t1-List Tables\n\t2-Create Table\t\t 3-Drop Table\n\t4-Insert Into Table\t 5-Select From Table\t\n\t6-Delete From Table\t 7-Update Table\t\n\t\t\t 8-Exit" 
				read -p "Enter table option :- " optionNumber
				
			case $optionNumber in 
				1)
				echo -e "\t------- Listing Tables ------- "
					ls ./DataBases/"$dbName"
					tableStart	
					;; 
			2)
				echo -e "\t------- Create table -------"
				checkTableName $dbName;;
			3)
				echo -e "\t------- Drop table -------\nEnter Table name:- "
				dropTable $dbName;;
				
			4)
				echo -e "\t------- Insert Into Table -------\nEnter Table name:- ";;
				#insertInto $dbName;;
			5)
				echo -e "\t------- Select From Table -------\nEnter Table name:- ";;
				#selectFromTable $dbName;;
			6)
				echo -e "\t------- Delete From Table -------\nEnter Table name:- ";;
				#deleteFromTable $dbName;;
			7)	
				echo -e "\t------- Update Table -------\nEnter Table name:- ";;
				#updateFromTable $dbName;;
				8) 
				echo -e "\n\t\t----   Exit  -----"
					exit;;
			*)
				echo -e "\n!!!!!! ------ Enter vaild option !!!!!! ------ "
				#tableStart	
		   	
			esac
			else
				echo ":):):)------------Database do not exist------------:) :) :)"
				tableStart
			fi
		fi
}

tableStart
